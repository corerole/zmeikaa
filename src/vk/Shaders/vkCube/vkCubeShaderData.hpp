#pragma once
#ifndef VKCUBE_SHADER_DATA
#define VKCUBE_SHADER_DATA

#include <vector>
#include <chrono>
#include <GLM/glm.hpp>
#include <GLM/ext/matrix_transform.hpp> // translate / rotate
#include <GLM/ext/matrix_clip_space.hpp> // frustum

#if 1
namespace vkcube {

	const std::vector<float> vVertices = {
		// front
		-1.0f, -1.0f, +1.0f, // point blue
		+1.0f, -1.0f, +1.0f, // point magenta
		-1.0f, +1.0f, +1.0f, // point cyan
		+1.0f, +1.0f, +1.0f, // point white
		// back
		+1.0f, -1.0f, -1.0f, // point red
		-1.0f, -1.0f, -1.0f, // point black
		+1.0f, +1.0f, -1.0f, // point yellow
		-1.0f, +1.0f, -1.0f, // point green
		// right
		+1.0f, -1.0f, +1.0f, // point magenta
		+1.0f, -1.0f, -1.0f, // point red
		+1.0f, +1.0f, +1.0f, // point white
		+1.0f, +1.0f, -1.0f, // point yellow
		// left
		-1.0f, -1.0f, -1.0f, // point black
		-1.0f, -1.0f, +1.0f, // point blue
		-1.0f, +1.0f, -1.0f, // point green
		-1.0f, +1.0f, +1.0f, // point cyan
		// top
		-1.0f, +1.0f, +1.0f, // point cyan
		+1.0f, +1.0f, +1.0f, // point white
		-1.0f, +1.0f, -1.0f, // point green
		+1.0f, +1.0f, -1.0f, // point yellow
		// bottom
		-1.0f, -1.0f, -1.0f, // point black
		+1.0f, -1.0f, -1.0f, // point red
		-1.0f, -1.0f, +1.0f, // point blue
		+1.0f, -1.0f, +1.0f  // point magenta
	};

	const std::vector<float> vColors = {
		// front
		0.0f,  0.0f,  1.0f, // blue
		1.0f,  0.0f,  1.0f, // magenta
		0.0f,  1.0f,  1.0f, // cyan
		1.0f,  1.0f,  1.0f, // white
		// back
		1.0f,  0.0f,  0.0f, // red
		0.0f,  0.0f,  0.0f, // black
		1.0f,  1.0f,  0.0f, // yellow
		0.0f,  1.0f,  0.0f, // green
		// right
		1.0f,  0.0f,  1.0f, // magenta
		1.0f,  0.0f,  0.0f, // red
		1.0f,  1.0f,  1.0f, // white
		1.0f,  1.0f,  0.0f, // yellow
		// left
		0.0f,  0.0f,  0.0f, // black
		0.0f,  0.0f,  1.0f, // blue
		0.0f,  1.0f,  0.0f, // green
		0.0f,  1.0f,  1.0f, // cyan
		// top
		0.0f,  1.0f,  1.0f, // cyan
		1.0f,  1.0f,  1.0f, // white
		0.0f,  1.0f,  0.0f, // green
		1.0f,  1.0f,  0.0f, // yellow
		// bottom
		0.0f,  0.0f,  0.0f, // black
		1.0f,  0.0f,  0.0f, // red
		0.0f,  0.0f,  1.0f, // blue
		1.0f,  0.0f,  1.0f  // magenta
	};

	const std::vector<float> vNormals = {
		// front
		+0.0f, +0.0f, +1.0f, // forward
		+0.0f, +0.0f, +1.0f, // forward
		+0.0f, +0.0f, +1.0f, // forward
		+0.0f, +0.0f, +1.0f, // forward
		// back
		+0.0f, +0.0f, -1.0f, // backbard
		+0.0f, +0.0f, -1.0f, // backbard
		+0.0f, +0.0f, -1.0f, // backbard
		+0.0f, +0.0f, -1.0f, // backbard
		// right
		+1.0f, +0.0f, +0.0f, // right
		+1.0f, +0.0f, +0.0f, // right
		+1.0f, +0.0f, +0.0f, // right
		+1.0f, +0.0f, +0.0f, // right
		// left
		-1.0f, +0.0f, +0.0f, // left
		-1.0f, +0.0f, +0.0f, // left
		-1.0f, +0.0f, +0.0f, // left
		-1.0f, +0.0f, +0.0f, // left
		// top
		+0.0f, +1.0f, +0.0f, // up
		+0.0f, +1.0f, +0.0f, // up
		+0.0f, +1.0f, +0.0f, // up
		+0.0f, +1.0f, +0.0f, // up
		// bottom
		+0.0f, -1.0f, +0.0f, // down
		+0.0f, -1.0f, +0.0f, // down
		+0.0f, -1.0f, +0.0f, // down
		+0.0f, -1.0f, +0.0f  // down
	};
} // ns vkcube
#else

namespace vkcube {
#if 0
  const std::vector<float> vVertices = {
    // Передняя грань
    -1.0f, -1.0f, 1.0f, 1.0f,  // 0
     1.0f, -1.0f, 1.0f, 1.0f,  // 1
    -1.0f,  1.0f, 1.0f, 1.0f,  // 2
     1.0f,  1.0f, 1.0f, 1.0f,  // 3

     // Задняя грань
      1.0f, -1.0f, -1.0f, 1.0f, // 4
     -1.0f, -1.0f, -1.0f, 1.0f, // 5
      1.0f,  1.0f, -1.0f, 1.0f, // 6
     -1.0f,  1.0f, -1.0f, 1.0f, // 7

     // Правая грань
      1.0f, -1.0f,  1.0f, 1.0f, // 8
      1.0f, -1.0f, -1.0f, 1.0f, // 9
      1.0f,  1.0f,  1.0f, 1.0f, // 10
      1.0f,  1.0f, -1.0f, 1.0f, // 11

      // Левая грань
      -1.0f, -1.0f, -1.0f, 1.0f, // 12
      -1.0f, -1.0f,  1.0f, 1.0f, // 13
      -1.0f,  1.0f, -1.0f, 1.0f, // 14
      -1.0f,  1.0f,  1.0f, 1.0f, // 15

      // Верхняя грань
      -1.0f, 1.0f,  1.0f, 1.0f,  // 16
       1.0f, 1.0f,  1.0f, 1.0f,  // 17
      -1.0f, 1.0f, -1.0f, 1.0f,  // 18
       1.0f, 1.0f, -1.0f, 1.0f,  // 19

       // Нижняя грань
       -1.0f, -1.0f, -1.0f, 1.0f, // 20
        1.0f, -1.0f, -1.0f, 1.0f, // 21
       -1.0f, -1.0f,  1.0f, 1.0f, // 22
        1.0f, -1.0f,  1.0f, 1.0f  // 23
  };
#endif
  // Теперь разбиваем на треугольники (36 вершин)
  const std::vector<float> vVertices = {
    // Передняя грань
    -1.0f, -1.0f, 1.0f, 1.0f,  // 0
     1.0f, -1.0f, 1.0f, 1.0f,  // 1
    -1.0f,  1.0f, 1.0f, 1.0f,  // 2

     1.0f, -1.0f, 1.0f, 1.0f,  // 1
     1.0f,  1.0f, 1.0f, 1.0f,  // 3
    -1.0f,  1.0f, 1.0f, 1.0f,  // 2

    // Задняя грань
     1.0f, -1.0f, -1.0f, 1.0f, // 4
    -1.0f, -1.0f, -1.0f, 1.0f, // 5
     1.0f,  1.0f, -1.0f, 1.0f, // 6

    -1.0f, -1.0f, -1.0f, 1.0f, // 5
    -1.0f,  1.0f, -1.0f, 1.0f, // 7
     1.0f,  1.0f, -1.0f, 1.0f, // 6

     // Правая грань
      1.0f, -1.0f,  1.0f, 1.0f, // 8
      1.0f, -1.0f, -1.0f, 1.0f, // 9
      1.0f,  1.0f,  1.0f, 1.0f, // 10

      1.0f, -1.0f, -1.0f, 1.0f, // 9
      1.0f,  1.0f, -1.0f, 1.0f, // 11
      1.0f,  1.0f,  1.0f, 1.0f, // 10

      // Левая грань
      -1.0f, -1.0f, -1.0f, 1.0f, // 12
      -1.0f, -1.0f,  1.0f, 1.0f, // 13
      -1.0f,  1.0f, -1.0f, 1.0f, // 14

      -1.0f, -1.0f,  1.0f, 1.0f, // 13
      -1.0f,  1.0f,  1.0f, 1.0f, // 15
      -1.0f,  1.0f, -1.0f, 1.0f, // 14

      // Верхняя грань
      -1.0f, 1.0f,  1.0f, 1.0f,  // 16
       1.0f, 1.0f,  1.0f, 1.0f,  // 17
      -1.0f, 1.0f, -1.0f, 1.0f,  // 18

       1.0f, 1.0f,  1.0f, 1.0f,  // 17
       1.0f, 1.0f, -1.0f, 1.0f,  // 19
      -1.0f, 1.0f, -1.0f, 1.0f,  // 18

      // Нижняя грань
      -1.0f, -1.0f, -1.0f, 1.0f, // 20
       1.0f, -1.0f, -1.0f, 1.0f, // 21
      -1.0f, -1.0f,  1.0f, 1.0f, // 22

       1.0f, -1.0f, -1.0f, 1.0f, // 21
       1.0f, -1.0f,  1.0f, 1.0f, // 23
      -1.0f, -1.0f,  1.0f, 1.0f  // 22
  };

  // Аналогично перестраиваем цвета и нормали для 36 вершин
  // Цвета для 36 вершин (повторяем цвета для каждой вершины треугольника)
  const std::vector<float> vColors = {
    // Передняя грань (синий)
    0.0f, 0.0f, 1.0f, 1.0f, // 0
    0.0f, 0.0f, 1.0f, 1.0f, // 1
    0.0f, 0.0f, 1.0f, 1.0f, // 2
    0.0f, 0.0f, 1.0f, 1.0f, // 1
    0.0f, 0.0f, 1.0f, 1.0f, // 3
    0.0f, 0.0f, 1.0f, 1.0f, // 2

    // Задняя грань (красный)
    1.0f, 0.0f, 0.0f, 1.0f, // 4
    1.0f, 0.0f, 0.0f, 1.0f, // 5
    1.0f, 0.0f, 0.0f, 1.0f, // 6
    1.0f, 0.0f, 0.0f, 1.0f, // 5
    1.0f, 0.0f, 0.0f, 1.0f, // 7
    1.0f, 0.0f, 0.0f, 1.0f, // 6

    // Правая грань (маджента)
    1.0f, 0.0f, 1.0f, 1.0f, // 8
    1.0f, 0.0f, 1.0f, 1.0f, // 9
    1.0f, 0.0f, 1.0f, 1.0f, // 10
    1.0f, 0.0f, 1.0f, 1.0f, // 9
    1.0f, 0.0f, 1.0f, 1.0f, // 11
    1.0f, 0.0f, 1.0f, 1.0f, // 10

    // Левая грань (черный)
    0.0f, 0.0f, 0.0f, 1.0f, // 12
    0.0f, 0.0f, 0.0f, 1.0f, // 13
    0.0f, 0.0f, 0.0f, 1.0f, // 14
    0.0f, 0.0f, 0.0f, 1.0f, // 13
    0.0f, 0.0f, 0.0f, 1.0f, // 15
    0.0f, 0.0f, 0.0f, 1.0f, // 14

    // Верхняя грань (голубой)
    0.0f, 1.0f, 1.0f, 1.0f, // 16
    0.0f, 1.0f, 1.0f, 1.0f, // 17
    0.0f, 1.0f, 1.0f, 1.0f, // 18
    0.0f, 1.0f, 1.0f, 1.0f, // 17
    0.0f, 1.0f, 1.0f, 1.0f, // 19
    0.0f, 1.0f, 1.0f, 1.0f, // 18

    // Нижняя грань (черный)
    0.0f, 0.0f, 0.0f, 1.0f, // 20
    0.0f, 0.0f, 0.0f, 1.0f, // 21
    0.0f, 0.0f, 0.0f, 1.0f, // 22
    0.0f, 0.0f, 0.0f, 1.0f, // 21
    0.0f, 0.0f, 0.0f, 1.0f, // 23
    0.0f, 0.0f, 0.0f, 1.0f  // 22
  };

  // Нормали для 36 вершин (аналогично повторяем)
  const std::vector<float> vNormals = {
    // Передняя грань
    0.0f, 0.0f, 1.0f, // 0
    0.0f, 0.0f, 1.0f, // 1
    0.0f, 0.0f, 1.0f, // 2
    0.0f, 0.0f, 1.0f, // 1
    0.0f, 0.0f, 1.0f, // 3
    0.0f, 0.0f, 1.0f, // 2

    // Задняя грань
    0.0f, 0.0f, -1.0f, // 4
    0.0f, 0.0f, -1.0f, // 5
    0.0f, 0.0f, -1.0f, // 6
    0.0f, 0.0f, -1.0f, // 5
    0.0f, 0.0f, -1.0f, // 7
    0.0f, 0.0f, -1.0f, // 6

    // Правая грань
    1.0f, 0.0f, 0.0f, // 8
    1.0f, 0.0f, 0.0f, // 9
    1.0f, 0.0f, 0.0f, // 10
    1.0f, 0.0f, 0.0f, // 9
    1.0f, 0.0f, 0.0f, // 11
    1.0f, 0.0f, 0.0f, // 10

    // Левая грань
    -1.0f, 0.0f, 0.0f, // 12
    -1.0f, 0.0f, 0.0f, // 13
    -1.0f, 0.0f, 0.0f, // 14
    -1.0f, 0.0f, 0.0f, // 13
    -1.0f, 0.0f, 0.0f, // 15
    -1.0f, 0.0f, 0.0f, // 14

    // Верхняя грань
    0.0f, 1.0f, 0.0f, // 16
    0.0f, 1.0f, 0.0f, // 17
    0.0f, 1.0f, 0.0f, // 18
    0.0f, 1.0f, 0.0f, // 17
    0.0f, 1.0f, 0.0f, // 19
    0.0f, 1.0f, 0.0f, // 18

    // Нижняя грань
    0.0f, -1.0f, 0.0f, // 20
    0.0f, -1.0f, 0.0f, // 21
    0.0f, -1.0f, 0.0f, // 22
    0.0f, -1.0f, 0.0f, // 21
    0.0f, -1.0f, 0.0f, // 23
    0.0f, -1.0f, 0.0f  // 22
  };
} // ns vkcube

#endif 

#endif // !NEW_SHADER
